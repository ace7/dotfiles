# Time-stamp: <2014-07-17 14:45:31 kmodi>
# Running tmux version 1.9a on tcsh in xterm

################################################################################
# PREFIX
set   -g prefix C-z
unbind C-b # unbind the default binding to send prefix key to the application
# Often you'll run a tmux inside another tmux and need a command sequence to
# send things to the inner session. With below binding that can be accomplished
# using "PREFIX Z <command>"
bind   Z send-prefix

# Source config
unbind r # unbind default binding to force redraw of attached client
bind   r source-file ~/.tmux.conf \; display "Finished sourcing ~/.tmux.conf ."

################################################################################
# Pane Management (no pun intended)
set   -g pane-base-index 1   # start pane indices at 1
bind   o select-pane -t :.+  # cycle panes
bind   O select-pane -t :.-  # cycle panes in reverse
bind   z resize-pane -Z      # zoom/unzoom the current pane
# Convert a window from current or any other session to a pane
bind   j command-prompt -p "Join pane from [sess:]win# (ex: kmodi:3 or 2(from current session)):" "join-pane -s '%%'"
# Convert a pane to a window in current or any other session
bind   J command-prompt -p "Send pane to sess or sess:win# or win# (ex: kmodi or kmodi:3 or 2(of current session)):" "join-pane -t '%%'"
# If the window has >1 panes kill them without confirming. But confirm before kill
# the last pane (along with its window) in a window
bind   x if "tmux display -p \"#{window_panes}\" | grep ^1\$" \
    "confirm-before -p \"Kill the only pane in window? It will kill this window too! (y/n)\" kill-pane" \
    "kill-pane"
# resize pane
bind  -r C-h resize-pane -L 2
bind  -r C-j resize-pane -D 2
bind  -r C-k resize-pane -U 2
bind  -r C-l resize-pane -R 2
bind   C clear-history \; display "Cleared history of the current pane."
bind   P run -b "tmux display -p -F '#{pane_current_path}' | xclip -i" \; display "Copied current path '#{pane_current_path}' to the clipboard."
# bind   / command-prompt -p "man" "send-keys \"/home/kmodi/scripts/tcsh/tmux/dynamic_split.csh 'man %1'\" Enter"
bind   / command-prompt -p "man" "run \"/home/kmodi/scripts/tcsh/tmux/dynamic_split.csh 'man %1'\""
# Usage: PREFIX / brings up the tmux command prompt. Enter the command for which you want
#        to see the man page, example: ls. That man page will open in a split pane.
#        When you are done reviewing the man page, hit q and the split pane closes by itself.
#        Beautiful!
unbind c # unbind default binding for `new-window`
# bind   c split-window -h 'ipython --profile=default --no-confirm-exit' # open python interpreter in a split window for
bind   c run "/home/kmodi/scripts/tcsh/tmux/dynamic_split.csh 'ipython --profile=default --no-confirm-exit'"
  # quick calculations. Ctrl-D in python quits python and thus closes the split window too.
bind   a run "/home/kmodi/scripts/tcsh/tmux/dynamic_split.csh 'emacsclient -a \"\" -t'" # start new emacs frame in a split window
# PREFIX Up, Down, Right, Left : Move cursor from one pane to another
# PREFIX Space                 : Cycle through different pane layouts
# PREFIX !                     : break-pane, convert the current pane to a window
# PREFIX ;                     : last-pane, switch to the last active pane
# PREFIX C-o                   : rotate-window, rotate panes in the current window

################################################################################
# Window Management
set   -g base-index 1 # start window indices at 1
# automatically renumber the windows
# http://unix.stackexchange.com/questions/21742/renumbering-windows-in-tmux
set   -g renumber-windows on
unbind & # unbind default binding for `split-window -h`
bind   - split-window -v -c '#{pane_current_path}' # vertical split
bind   | split-window -h -c '#{pane_current_path}' # horizontal split
bind C-f command-prompt -p "New window:" "new-window -c '#{pane_current_path}' -n %1"
bind C-r command-prompt -p "New name for this window:" "rename-window '%%'"
unbind l # unbind default binding for `last-window`
bind   l list-windows -F '#{window_index}:#{window_name}: #{?pane_dead, (dead), (not dead)}'﻿
bind C-z last-window # switch to last active window
unbind t # unbind default binding to show time
bind   t swap-window -t 1 # swap the current window's position with window # 1, move it to the top
# Move the current window to another window index in the same or any other session
bind   m command-prompt -p "Move window to sess or sess:win# or win# (ex: kmodi or kmodi:3 or 2(of current session)):" "move-window -t '%%'"
# Move or bring a window from a different session to the current one
bind   M command-prompt -p "Move the window from sess:win# (ex: kmodi:3):" "move-window -s '%%'"
bind   N move-window -r # renumber the windows
unbind  , # unbind default binding for `rename-window`
bind -r , swap-window -t -1 # move window one position to the left
bind -r < swap-window -t -1 # move window one position to the left
unbind  . # unbind default binding to move window to user provided index
bind -r . swap-window -t +1 # move window one position to the right
bind -r > swap-window -t +1 # move window one position to the right
unbind & # unbind default binding for `kill-window`
bind C-c confirm-before -p "Kill this window? (y/n)" kill-window
# switch to another window by name
bind   w split-window "tmux lsw | percol --initial-index `tmux lsw | awk '/active.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux select-window -t"
# bind   w split-window "/home/kmodi/scripts/bash/tmux_percol/window_selector.sh"
# Allow repeats for next/previous-window
bind -r   p previous-window
bind -r   n next-window
bind    C-p previous-window
bind    C-n next-window
# PREFIX # : switches to window with index=#
# PREFIX w : choose-window, choose window interactively

################################################################################
# Session Management
bind C-t command-prompt -p "New name for this session:" "rename-session '%%'"
unbind L # unbind default binding for `switch-client -l`
bind   b switch-client -l # switch to previously selected session
# switch to another session by name
bind   S split-window "tmux ls | percol --initial-index `tmux ls | awk '/attached.$/ {print NR-1}'` | cut -d':' -f 1 | xargs tmux switch-client -t"
# switch to ANY window in ANY session by name
bind   s split-window "tmux ls | cut -d: -f1 | xargs -I SESSION tmux lsw -F 'SESSION:#{window_name}' -t SESSION | percol --initial-index `tmux ls | cut -d: -f1 | xargs -I SESSION tmux lsw -F '___#{session_attached}#{window_active}___' -t SESSION | awk '/___11___/ {print NR-1}'` | xargs tmux switch-client -t"
# bind   s split-window "/home/kmodi/scripts/bash/tmux_percol/session_selector.sh"
# PREFIX s : choose-session, select a session to switch to
# tmux kill-session -t NAME/SESSIONNUMBER # Kill session

################################################################################
# Enable Mouse actions
set   -g mouse-resize-pane on
set   -g mouse-select-pane on
set   -g mouse-select-window on
set   -g mouse-utf8 off
setw  -g mode-mouse on

################################################################################
# window title
set   -g set-titles on
set   -g set-titles-string '#h :: #S :: #W W#I/#{session_windows} :: P#P/#{window_panes}'


################################################################################
# style colors: default, black, red, green, yellow, blue, magenta, cyan, white,
#               colour0-colour255, hexdecimal RGB string '#ffffff'
# Use $SCRIPTS/bash/256-colors.sh to figure out the color number you want
# style attributes: none, bold/bright, dim, underscore, blink, reverse, hidden,
#                   or italics
################################################################################

################################################################################
# Status Bar
set   -g status-utf8         on
set   -g status-interval     5 # default = 15 seconds
set   -g status-justify      centre
# left status
set   -g status-left-length  20
set   -g status-left         "[#S]"
# right status
set   -g status-right-length 20
set   -g status-right        "%l:%M %b %d %a "

# # tmux-powerline
# # https://github.com/erikw/tmux-powerline
# set -g status-left-length 30
# set -g status-right-length 30
# set -g status-left "#(~/usr_local/scripts/tmux-powerline/powerline.sh left)"
# set -g status-right "#(~/usr_local/scripts/tmux-powerline/powerline.sh right)"

# Fonts/colors customizations
set   -g pane-active-border-style     fg=colour221,bg=default
set   -g pane-border-style            fg=colour235,bg=default
set   -g status-style                 fg=colour246,bg=black # default for whole status line
set   -g status-left-style            fg=white,bold,bg=black
set   -g status-right-style           fg=colour75,none,bg=black
set   -g message-style                fg=white,bold,bg=colour166
setw  -g window-status-style          default # default for all window statuses
setw  -g window-status-last-style     default
setw  -g window-status-current-style  fg=white,bold,bg=colour166
setw  -g window-status-bell-style     default
setw  -g window-status-activity-style fg=white,none,bg=red
setw  -g window-status-content-style  fg=black,none,bg=green
setw  -g mode-style                   fg=black,bg=colour166 # color of display shown
                                            # on top-right in copy-mode, highlighting

# Notify when a window has activity
# This quick snippet will have tmux notify you in the status area when a
# window has activity:
setw  -g monitor-activity on
set   -g visual-activity  on # Display message telling that an activity happened (on/off)
# It lets me know that there is activity in a non-active window
# To try this, enter `sleep 10 && echo “Hi”` in a window and switch to
# another window.

# Notify when a window has a content alert
setw  -g monitor-content "--[A-Za-z][A-Za-z]sim Done--" # This string appears when a sim finishes, alert then
# setw  -g monitor-content "" # Disable monitor-content
set   -g visual-content  on # Display message telling that a content alert was triggered (on/off)

# Move focus to command prompt. tmux commands can be entered there directly
# without using the `tmux` prefix and it also supports auto-complete.
bind C-x command-prompt # default command-prompt binding "PREFIX :" also works

################################################################################
# audible and visual bells
set   -g bell-action any
set   -g bell-on-alert off
set   -g visual-bell on

################################################################################
# COPY & PASTE
# Copy tmux buffer to X clipboard
# run -b runs a shell command in background
# bind C-w run -b "tmux show-buffer | xclip -selection clipboard -i"
bind C-w run -b "tmux show-buffer | xclip -i"
# Paste from X clipboard into tmux; also replace newline characters with
# space characters when pasting
bind C-y run -b "exec </dev/null; xclip -o | awk 1 ORS=' ' | tmux load-buffer - ; tmux paste-buffer"
# Same as `C-y' binding except that the newline chars are not replaced with space
bind   Y run -b "exec </dev/null; xclip -o | tmux load-buffer - ; tmux paste-buffer"
# Open the file/dir path that was copied by selection in existing emacs client
# Usage: Highlight a file name in ls output and press "PREFIX e"
bind   e run -b "tmux show-buffer | xclip -i; (emacsclient -a '' `tmux display -p '#{pane_current_path}'`/`xclip -o`&)"

# For copy and paste to work seamlessly, I had to add these lines to my tcsh .alias
    # # Copy from tmux buffer
    # alias tcpy 'tmux show-buffer | xi'
    # # Usage: Highlight the text you want to copy in tmux and then type `tcpy` at
    # #        the commandline. That will copy the highlighted portion to clipboard.
    # # Paste to tmux buffer
    # alias tpas 'tmux set-buffer `xo`'
    # # Usage: To paste a text to the tmux buffer, first type `tpas` and then the
    # #        binding to paste in tmux `C-z C-y`

################################################################################
# Send the same command to all panes/windows in the specified session
# Inspired from http://stackoverflow.com/questions/9250884/send-command-to-all-window-in-tmux
bind  C-e command-prompt -p "Session:,Command:" \
          "run \"tmux list-windows  -t %1            -F '%1:##{window_index}'     | xargs -I SESS_WIN \
                 tmux list-panes    -t SESS_WIN      -F 'SESS_WIN.##{pane_index}' | xargs -I SESS_WIN_PANE \
                 tmux send-keys     -t SESS_WIN_PANE '%2' Enter\""
# Send the same command to all panes/windows/sessions
bind    E command-prompt -p "Command:" \
          "run \"tmux list-sessions                  -F '##{session_name}'        | xargs -I SESS \
                 tmux list-windows  -t SESS          -F 'SESS:##{window_index}'   | xargs -I SESS_WIN \
                 tmux list-panes    -t SESS_WIN      -F 'SESS_WIN.##{pane_index}' | xargs -I SESS_WIN_PANE \
                 tmux send-keys     -t SESS_WIN_PANE '%1' Enter\""

################################################################################
# Environment variables
set   -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"

################################################################################
# Miscellaneous
# When a smaller terminal connects to a tmux client, it shrinks to fit it. The
# clients attached with bigger displays see this constrained view.
# aggressive-resize makes it such that the window is only resized if the smaller
# client is actively looking at it.
setw  -g aggressive-resize on
setw  -g mode-keys         emacs # Use emacs keybindings in copy mode
setw  -g status-keys       emacs
setw  -g xterm-keys        on
set   -s escape-time       0 # Allows for faster key repetition
set   -g default-terminal  "xterm-256color" # "xterm"
set   -g history-limit     500000
set   -g display-time      1000 # Duration of tmux display messages in milliseconds
################################################################################
# end of tmux configuration
################################################################################

# set is equivalent to set-option
# setw -> set-window-option
# bind -> bind-key
# unbind -> unbind-key
# display -> display-message
# run -> run-shell
# if -> if-shell

# Colo'u'r table
# http://guns.github.io/xterm-color-table.vim/images/xterm-color-table.png

# CHARACTER PAIR       REPLACED WITH
#    #(command)        First line of command’s output
#    #[attributes]     Colour or attribute change
#    #H                Hostname of local host
#    #I                Current window index
#    #P                Current pane index
#    #S                Session name
#    #T                Current window title
#    #W                Current window name
#    ##                A literal ‘#’

# Variables used in time format
# Source: http://docs.splunk.com/Documentation/Splunk/5.0.2/SearchReference/Commontimeformatvariables
# %y = year in numbers (2-digit)
# %Y = year in numbers (4-digit)
# %m = month in number (eg: 12)
    # %B = full month name (eg: December)sho
# %b = short month name (eg: Dec)
# %d = day in numbers, with leading zeros (eg: 08)
# %e = day in numbers, no leading zeros (eg: 8)
# %A = full weekday name (eg: Sunday)
# %a = short weekday name (eg: Sun)
# %H = hours in 24-clock, with leading zeros
# %k = hours in 24-clock, no leading zeros
# %l = hours in 12-clock, with leading zeros
# %p = am/pm
# %T = time in 24-hour notation (%H:%M:%S)

# PREFIX ? : list-keys, display key bindings

# In command-prompt: show-options -g shows the global options
# In command-prompt: show-window-options -g shows the global windows options

# How do I know which tmux version I am running?
# tmux -V
